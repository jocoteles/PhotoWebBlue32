Instruções para desenvolvimento do projeto PhotoWebBlue32.

Este projeto deverá utilizar a estrutura e filosofia do projeto ESP32WebBluetooh.

Trata-se de um projeto de um sistema photogate para laboratórios de ensino de Física composto por 6 canais analógicos lidos e comunicados por uma ESP32 para um PWA via API WebBluetooh.

O lado do cliente será um pwa single page com as seguintes características:

O layout será o seguinte:

[Conexão] [Canais] [Config]: Esses botões estarão sempre no topo ocupando toda a largura da página. Os botões Conexão e Config deverão ter fundo azul claro e letra preta. O botão Canais deverá ter fundo azul escuro e letra branca. Ao clicar em um botão, o respectivo div é mostrado e os demais são escondidos.

- Div Conexão:

Pode ser idêntico à janela de conexão do template atual. Deverá apenas ser adicionada a informação do nome do dispositivo conectado no momento. Isso é importante pois serão montados vários kits de photogates que irão estar sendo usados ao mesmo tempo (um por cada grupo de estudante).

- Div Canais:

[Disparar leitura]: Esse botão ficará no topo quando o div Canais estiver visível em cor verde. Ao clicar, ele muda para vermelho com o texto "Interromper leitura". Toda vez que uma leitura é disparada, o Gráfico de níveis e a Tabela de tempos (ambos explicados abaixo) são zerados, ou seja, qualquer dado anteriormente medido é perdido e completamente substituído pela aquisição atual.

Gráfico em linha contínua dos níveis dos canais em função do tempo contendo os dados obtidos pelo streaming que serão graficados somente após a interrupção da leitura. Atenção: não tente construir o gráfico em tempo real pois a taxa de aquisição é muito alta para as bibliotecas js. Para cada canal haverá uma linha tracejada horizontal de mesma cor do correspondente canal com altura igual ao nível do trigger escolhido para este canal (default = 2048).

A cor de cada canal deverá ser:
canal 1: vermelho
canal 2: laranja
canal 3: amarelo
canal 4: verde
canal 5: azul
canal 6: violeta

Daqui para baixo até o final do div Canais, todos os elementos deverão estar habilitados para edição somente se não estiver havendo aquisição de dados de streaming.



Array de 7x3 botões de toogle com a seguinte estrutura:

Canal | Subida | Descida
   1  |   s1   |   d1
   2  |   s2   |   d2
   3  |   s3   |   d3
   4  |   s4   |   d4
   5  |   s5   |   d5
   6  |   s6   |   d6

Por padrão, todos os botões começam habilitados. As cores de fundo dos botões deve respeitar o esquema de cores dos canais.
Ao clicar no botão "Canal" é feito o toogle de todos os botões de "1" a "6", independente dos seus valore originais. Ou seja: todos são acionados ou todos são desligados. O mesmo ocorre com o botão "Subida" que faz o toogle dos botões de "s1" a "s6". E o mesmo para "Descida" para os botões "d1" a "d6".
Ao clicar nos botões que possuem números, ou seja, qualquer um da linha 1 a 6, somente o botão apertado sofre o toogle.

No gráfico devem ser mostrados somente os canais (e correspondentes níveis de trigger) habilitados no array de botões com o nível do trigger no eixo y e o tempo em milissegundos no eixo x. O nível do trigger será alterado para a altura em que o usuário tocar o gráfico (com o dedo nas telas touch ou clicar com o mouse). Essa alteração no nível do trigger deverá ser realizada simultaneamente para todos os canais que estiverem atualmente habilitados no array de botões. Os canais que não estiverem habilitados (e que não aparecem no gráfico) não deverão ter seus níveis de trigger alterados. Escolha uma biblioteca que permita "pan and zoom".

Tabela de tempos com a seguinte estrutura:

Evento | Canal | Subida | Descida

Ela deverá ser preenchida com os eventos de trigger (um evento por linha). Na coluna Canal deverá ser indicado o número do canal em que o evento ocorreu e o tempo em que ele ocorreu deverá ser preenchido na respectiva coluna de Subida ou Descida. Atenção: somente os canais e os eventos de trigger selecionados no array de botões deverão ser mostrados na tabela. A coluna Evento receberá um número inteiro em ordem cronológica do evento mostrado na tabela. Ou seja, a numeração dos eventos começará em 1 e nunca pulará um número inteiro. Portanto, essa tabela deverá ser reconstruída toda vez que:
1) Algum botão do array de botões for selecionado.
2) O nível de trigger for alterado no gráfico.
3) O botão "Zerar origem temporal" descrito abaixo for clicado.

[Zerar origem temporal]. Botão toogle que aplica o mesmo deslocamento temporal para todos os canais de forma que o primeiro evento corresponda a t = 0. Deverá atualizar os tempos na tabela e a origem do tempo no gráfico.

[Mostrar eventos no gráfico]. Botão toogle que mostra cada um dos eventos mostrados na tabela como um pequeno círculo cheio na coordenada x,y (tempo,nível) do evento no gráfico em que próximo ao círculo é colocado o número do Evento conforme mostrado na tabela. Toda vez que o botão "Disparar leitura" é acionado esse botão é desligado.

Campo de "Salvar dados" deverá ter três botões:

Tempos: [Copiar] [Salvar]. O primeiro copia a tabela de tempos para a área de transferência e o segundo abre a janela de diálogo para salvar o arquivo csv correspondente à tabela de tempos.
[Salvar gráfico]. Abre janela de diálogo para salvar os gráficos de níveis dos canais em um arquivo csv. Salva somente os dados dos canais sendo mostrados: tempo, canal x, canal y, etc. Não salva os níveis de trigger.


- Div Config:

Espessura canal: 20% a 200% da espessura padrão (default 100%). Determina a espessura da linha contínua de nível de todos os canais. É o mesmo valor para todos os canais.
Espessura trigger: 20% a 200% da espessura padrão (default 100%). Determina a espessura da linha horizontal tracejada de trigger de todos os canais. É o mesmo valor para todos os canais.
Raio evento: 20% a 200% do raio padrão (default 100%). Determina o raio dos círculos dos eventos mostrados no gráfico. É o mesmo valor para todos.
Altura do gráfico: 20% a 200% da altura padrão (default 100%). Determina a altura da janela gráfica do gráfico de níveis dos canais.
Tempo máximo de aquisição: de 1 s a 60 s (default 20 s). É o tempo máximo que dura a aquisição do streaming de dados. Após esse período a aquisição é compulsoriamente interrompida. Este recurso é importante para não haver estouro de memória e travamento do PWA.

[Avançado] ocupa toda a largura da tela e quando clicado pedirá uma senha (pode incluí-la no arquivo de frontend de forma explícita e sem criptografia, ex: "bolt") que habilitará a edição dos dois parâmetros abaixo:

Tamanho do buffer de leituras: (corresponde á variável SAMPLES_PER_CHUNK que agora poderá ser passada para a ESP32 a partir daqui). Default: 20. Mínimo: 1. Máximo: 100 (ou o máximo valor que a API ou o hardware permitir - verifique).
Intervalo entre leituras [µs]: (corresponde á variável SAMPLE_INTERVAL_US que agora também poderá ser passada para a ESP32 a partir daqui). Default: 250. Mínimo: 50. Máximo: 1000.
Essas duas variáveis deverão ser comunicadas via JSON seguindo o protocolo do projeto de template. Toda vez que uma dessas variáveis for alterada ela volta a ficar bloqueada (não editável).


Sobre os arquivos do projeto:

README.md: Este projeto deverá seguir a mesma filosofia do template. Mas especifique o uso para este projeto de photogate para ensino de física com seis canais analógicos usando tecnologia WebBluetooh. Seja específico para este projeto. Ele não é um template como o original.

Os arquivos .cpp e .h deverão ter o mesmo nome e não deverão ser alterados.
O arquivo .ino deverá se chamar PWB32Server.ino
Os demais arquivos deverão ter os mesmos nomes.